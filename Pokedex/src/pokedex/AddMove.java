package pokedex;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import javax.swing.JOptionPane;


public class AddMove extends javax.swing.JFrame {

    /**
     * Creates new form AddMove
     */
    Connection con;
    Statement statement;
    PreparedStatement prepStatement;
    ResultSet rs;

    public AddMove(myDBCon connect) {
        initComponents();
        con = connect.getCon();
        // center form in screen 
        this.setLocationRelativeTo(null);
        
        // set all error labels to invisible
        lblMoveNameError.setVisible(false);
        lblMovePPError.setVisible(false);
        

        //populate type combo box
        try {
            // make the result set scrolable forward/backward updatable
            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = statement.executeQuery("SELECT name FROM type");
            while (rs.next()) {
                cmbType.addItem(rs.getString("name"));
            }

            rs.close();
            statement.close();
        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMoveName = new javax.swing.JTextField();
        txtMovePP = new javax.swing.JTextField();
        cmbType = new javax.swing.JComboBox<>();
        btnAddType = new javax.swing.JButton();
        lblMoveNameError = new javax.swing.JLabel();
        lblMovePPError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Move");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Move Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("PowerPoints:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Move Type:");

        txtMoveName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtMovePP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        cmbType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnAddType.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAddType.setText("Add New");
        btnAddType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });

        lblMoveNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblMoveNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblMoveNameError.setText("error label");

        lblMovePPError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblMovePPError.setForeground(new java.awt.Color(255, 0, 0));
        lblMovePPError.setText("error label");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMoveName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblMoveNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMovePP, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblMovePPError, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(btnAddType))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMoveName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMoveNameError))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMovePP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMovePPError))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(btnAddType)
                .addGap(0, 52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable
            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (isValidData()) {
                prepStatement = con.prepareStatement("INSERT INTO move (name, powerpoints, move_type) VALUES (?, ?, ?)");
                
                prepStatement.setString(1, txtMoveName.getText().toUpperCase());
                prepStatement.setInt(2, Integer.parseInt(txtMovePP.getText()));
                prepStatement.setString(3, cmbType.getSelectedItem().toString().toUpperCase());
                int result = prepStatement.executeUpdate();
                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("New move added successfully!");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    clearInputBoxes();
                } else {
                    // check validation errors
                }

                rs.close();
                statement.close();
                prepStatement.close();
            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new move.");
        }
    }//GEN-LAST:event_btnAddNewEmpActionPerformed

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    void clearErrorLabels() {
        
        lblMoveNameError.setText("");
        lblMoveNameError.setVisible(false);
        lblMovePPError.setText("");
        lblMovePPError.setVisible(false);
    }

    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
       

        if (txtMoveName.getText().trim().isEmpty() || (txtMoveName.getText().trim().length() > 30)) {
            if (txtMoveName.getText().trim().isEmpty()) {
                lblMoveNameError.setText("Invalid. Cannot be empty.");
            } else if ((txtMoveName.getText().trim().length() > 30)) {
                lblMoveNameError.setText("Invalid. Must be < 30 chars.");
            }

            lblMoveNameError.setVisible(true);
            result = false;
        }
        
        //checking if the move already exists in the table
        try {
           
            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            rs = statement.executeQuery("SELECT * FROM move WHERE name = '" + txtMoveName.getText().trim() + "'");
            if (rs.isBeforeFirst()) {
                lblMoveNameError.setText("Invalid. Move already exists in table.");
                lblMoveNameError.setVisible(true);
                result = false; 
              
            }
            
            rs.close();
            statement.close();
        } catch (SQLException e) {
            System.out.println(e);
        }

        

        if (txtMovePP.getText().trim().isEmpty() || !(isInteger(txtMovePP.getText().trim()) || isDouble(txtMovePP.getText().trim()))) {
            if (txtMovePP.getText().trim().isEmpty()) {
                lblMovePPError.setText("Invalid. Cannot be empty.");
            } else if (!(isInteger(txtMovePP.getText().trim()) || isDouble(txtMovePP.getText().trim()))) {
                lblMovePPError.setText("Invalid. Must be number.");
            }

            lblMovePPError.setVisible(true);
            result = false;
        }


        return result;
    }

    void clearInputBoxes() {
       
        txtMoveName.setText("");
        txtMovePP.setText("");
        cmbType.setSelectedIndex(0);
       
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewMove_;
    private javax.swing.JButton btnAddNewType;
    private javax.swing.JButton btnAddType;
    private javax.swing.JComboBox<String> cmbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblMoveNameError;
    private javax.swing.JLabel lblMovePPError;
    private javax.swing.JTextField txtMoveName;
    private javax.swing.JTextField txtMovePP;
    // End of variables declaration//GEN-END:variables
}
