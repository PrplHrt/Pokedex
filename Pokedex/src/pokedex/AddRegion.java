package pokedex;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import javax.swing.JOptionPane;


public class AddRegion extends javax.swing.JFrame {

    /**
     * Creates new form AddEmployee
     */
    Connection con;
    Statement statement;
    PreparedStatement prepStatement;
    ResultSet rs;

    public AddRegion(myDBCon connect) {
        initComponents();
        con = connect.getCon();
        // center form in screen 
        this.setLocationRelativeTo(null);
        // set all error labels to invisible
        lblEmpnoError.setVisible(false);
        lblEnameError.setVisible(false);
        lblJobError.setVisible(false);
        lblHiredateError.setVisible(false);
        lblSalaryError.setVisible(false);
        lblCommError.setVisible(false);

        //populate mgr and deptno combo boxes 
        try {
            // make the result set scrolable forward/backward updatable
            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            // populate valid mgr numbers 
            rs = statement.executeQuery("SELECT empno FROM emp ORDER BY empno ASC");
            // populate mgr combo box
            while (rs.next()) {
                cmbMgr.addItem(rs.getString("empno"));
            }

            // get and populate valid department numbers 
            rs = statement.executeQuery("SELECT DISTINCT deptno, dname FROM dept ORDER BY deptno ASC");
            while (rs.next()) {
                cmbDeptno.addItem(rs.getString("deptno"));
            }

            rs.close();
            statement.close();
        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtEmpno = new javax.swing.JTextField();
        txtEname = new javax.swing.JTextField();
        txtJob = new javax.swing.JTextField();
        btnAddNewEmp = new javax.swing.JButton();
        lblEmpnoError = new javax.swing.JLabel();
        lblJobError = new javax.swing.JLabel();
        lblEnameError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Region");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Capital:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Professor:");

        txtEmpno.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtEname.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtJob.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobActionPerformed(evt);
            }
        });

        btnAddNewEmp.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAddNewEmp.setText("Add New");
        btnAddNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });

        lblEmpnoError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEmpnoError.setForeground(new java.awt.Color(255, 0, 0));
        lblEmpnoError.setText("error label");

        lblJobError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblJobError.setForeground(new java.awt.Color(255, 0, 0));
        lblJobError.setText("error label");

        lblEnameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEnameError.setForeground(new java.awt.Color(255, 0, 0));
        lblEnameError.setText("error label");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEmpno, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(txtEname, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(txtJob)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(btnAddNewEmp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblEnameError, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(lblJobError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblEmpnoError, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                .addContainerGap(68, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtEmpno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpnoError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEnameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblJobError))
                .addGap(33, 33, 33)
                .addComponent(btnAddNewEmp)
                .addGap(0, 49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    void clearErrorLabels() {
        lblEmpnoError.setText("");
        lblEmpnoError.setVisible(false);
        lblEnameError.setText("");
        lblEnameError.setVisible(false);
        lblJobError.setText("");
        lblJobError.setVisible(false);
        lblHiredateError.setText("");
        lblHiredateError.setVisible(false);
        lblSalaryError.setText("");
        lblSalaryError.setVisible(false);
        lblCommError.setText("");
        lblCommError.setVisible(false);

    }

    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
        if (txtEmpno.getText().trim().isEmpty() || !isInteger(txtEmpno.getText().trim())) {
            if (txtEmpno.getText().trim().isEmpty()) {
                lblEmpnoError.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtEmpno.getText().trim())) {
                lblEmpnoError.setText("Invalid. Must be integer.");
            }

            lblEmpnoError.setVisible(true);
            result = false;
        }

        if (txtEname.getText().trim().isEmpty() || (txtEname.getText().trim().length() > 10)) {
            if (txtEname.getText().trim().isEmpty()) {
                lblEnameError.setText("Invalid. Cannot be empty.");
            } else if ((txtEname.getText().trim().length() > 10)) {
                lblEnameError.setText("Invalid. Must be < 10 chars.");
            }

            lblEnameError.setVisible(true);
            result = false;
        }

        if (txtJob.getText().trim().isEmpty() || (txtJob.getText().trim().length() > 9)) {
            if (txtJob.getText().trim().isEmpty()) {
                lblJobError.setText("Invalid. Cannot be empty.");
            } else if (txtJob.getText().trim().length() > 9) {
                lblJobError.setText("Invalid. Must be < 9 chars.");
            }
            lblJobError.setVisible(true);
            result = false;
        }

        if (ftxtHiredate.getText().trim().isEmpty()) {
            lblHiredateError.setText("Invalid. Cannot be empty.");
            lblHiredateError.setVisible(true);
            result = false;
        }

        if (txtSalary.getText().trim().isEmpty() || !(isInteger(txtSalary.getText().trim()) || isDouble(txtSalary.getText().trim()))) {
            if (txtSalary.getText().trim().isEmpty()) {
                lblSalaryError.setText("Invalid. Cannot be empty.");
            } else if (!(isInteger(txtSalary.getText().trim()) || isDouble(txtSalary.getText().trim()))) {
                lblSalaryError.setText("Invalid. Must be number.");
            }

            lblSalaryError.setVisible(true);
            result = false;
        }

        if (txtComm.getText().trim().isEmpty() || !isInteger(txtComm.getText().trim())) {
            if (txtComm.getText().trim().isEmpty()) {
                lblCommError.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtComm.getText().trim())) {
                lblCommError.setText("Invalid. Must be integer");
            }

            lblCommError.setVisible(true);
            result = false;
        }

        return result;
    }

    void clearInputBoxes() {
        txtEmpno.setText("");
        txtEname.setText("");
        txtJob.setText("");
        ftxtHiredate.setText("");
        txtSalary.setText("");
        txtComm.setText("");
        cmbDeptno.setSelectedIndex(0);
        cmbMgr.setSelectedIndex(0);
    }

    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable
            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (isValidData()) {
                prepStatement = con.prepareStatement("INSERT INTO emp (empno, ename, job, mgr, hiredate, sal, comm, deptno) VALUES (? , ? , ?, ? , ? , ?, ?, ?)");
                prepStatement.setInt(1, Integer.parseInt(txtEmpno.getText()));
                prepStatement.setString(2, txtEname.getText().toUpperCase());
                prepStatement.setString(3, txtJob.getText().toUpperCase());
                prepStatement.setInt(4, Integer.parseInt(cmbMgr.getSelectedItem().toString()));
                prepStatement.setString(5, ftxtHiredate.getText());
                prepStatement.setInt(6, Integer.parseInt(txtSalary.getText()));
                prepStatement.setInt(7, Integer.parseInt(txtComm.getText()));
                prepStatement.setInt(8, Integer.parseInt(cmbDeptno.getSelectedItem().toString()));
                int result = prepStatement.executeUpdate();
                if (result > 0) {

                    javax.swing.JLabel label = new javax.swing.JLabel("New employee added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    clearInputBoxes();
                } else {
                    // check validation errors 
                }

                rs.close();
                statement.close();
                prepStatement.close();
            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new employee.");
        }
    }//GEN-LAST:event_btnAddNewEmpActionPerformed

    private void txtJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtJobActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewEmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblEmpnoError;
    private javax.swing.JLabel lblEnameError;
    private javax.swing.JLabel lblJobError;
    private javax.swing.JTextField txtEmpno;
    private javax.swing.JTextField txtEname;
    private javax.swing.JTextField txtJob;
    // End of variables declaration//GEN-END:variables
}
